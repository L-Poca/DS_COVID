import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import io
import base64
from typing import Optional, Dict, Any, List
import warnings
warnings.filterwarnings('ignore')

# Imports du framework RAF
try:
    from src.features.raf.interpretability import (
        SHAPExplainer, GradCAMExplainer, InterpretabilityAnalyzer,
        create_interpretability_dashboard, generate_interpretability_report
    )
    RAF_AVAILABLE = True
except ImportError:
    RAF_AVAILABLE = False
    st.error("‚ö†Ô∏è Module RAF d'interpr√©tabilit√© non disponible")

# Configuration de la page
st.set_page_config(
    page_title="Interpr√©tabilit√© - SHAP & GradCAM",
    page_icon="üîç",
    layout="wide"
)

st.title("üîç Interpr√©tabilit√© des Mod√®les - SHAP & GradCAM")
st.markdown("---")

if not RAF_AVAILABLE:
    st.stop()

# Sidebar pour la configuration
with st.sidebar:
    st.header("‚öôÔ∏è Configuration")
    
    # Section Mod√®les
    st.subheader("üìã Mod√®les")
    
    # Upload de mod√®les (simulation)
    cnn_model_file = st.file_uploader("Mod√®le CNN (.h5/.keras)", type=['h5', 'keras'])
    ml_model_file = st.file_uploader("Mod√®le ML (.pkl/.joblib)", type=['pkl', 'joblib'])
    
    # Param√®tres GradCAM
    st.subheader("üéØ GradCAM")
    layer_name = st.text_input("Nom de la couche", placeholder="auto-d√©tection")
    gradcam_method = st.selectbox("M√©thode", ["GradCAM", "GradCAM++"])
    alpha = st.slider("Transparence superposition", 0.0, 1.0, 0.4, 0.1)
    colormap = st.selectbox("Colormap", ["jet", "hot", "viridis", "plasma"])
    
    # Param√®tres SHAP
    st.subheader("üìä SHAP")
    shap_method = st.selectbox("M√©thode SHAP", ["auto", "tree", "linear", "deep", "kernel"])
    max_evals = st.number_input("Max √©valuations", 100, 1000, 100)
    
    # Classes
    st.subheader("üè∑Ô∏è Classes")
    default_classes = ["COVID", "Normal", "Viral", "Lung_Opacity"]
    class_names = st.text_area(
        "Noms des classes (un par ligne)",
        value="\n".join(default_classes)
    ).split("\n")

# Interface principale
tab1, tab2, tab3, tab4 = st.tabs([
    "üñºÔ∏è Analyse Simple", 
    "üìä Comparaison", 
    "üìà Rapport Batch", 
    "üîß Utilitaires"
])

with tab1:
    st.header("üñºÔ∏è Analyse d'une Image")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("üì§ Upload Image")
        
        # Upload d'image
        uploaded_file = st.file_uploader(
            "Choisir une image",
            type=['png', 'jpg', 'jpeg'],
            key="single_image"
        )
        
        if uploaded_file is not None:
            # Affichage de l'image
            image = Image.open(uploaded_file)
            st.image(image, caption="Image upload√©e", use_column_width=True)
            
            # Conversion en array numpy
            img_array = np.array(image)
            if len(img_array.shape) == 3 and img_array.shape[-1] == 3:
                # Conversion en niveaux de gris si n√©cessaire
                img_gray = np.dot(img_array[...,:3], [0.2989, 0.5870, 0.1140])
                img_array = img_gray
            
            # Normalisation
            if img_array.max() > 1:
                img_array = img_array / 255.0
            
            # Redimensionnement (simulation - √† adapter selon vos mod√®les)
            target_size = st.selectbox("Taille cible", [(224, 224), (256, 256), (512, 512)])
            
            st.info(f"Image shape: {img_array.shape}")
            
        else:
            st.info("üëÜ Uploadez une image pour commencer l'analyse")
    
    with col2:
        st.subheader("üîç R√©sultats d'Analyse")
        
        if uploaded_file is not None:
            # Simulation d'analyse (√† remplacer par vrai mod√®le)
            if st.button("üöÄ Lancer l'Analyse", type="primary"):
                with st.spinner("Analyse en cours..."):
                    # Ici, vous int√©greriez vos vrais mod√®les
                    st.success("‚úÖ Analyse termin√©e !")
                    
                    # Tabs pour les r√©sultats
                    result_tab1, result_tab2, result_tab3 = st.tabs([
                        "GradCAM", "SHAP", "Comparaison"
                    ])
                    
                    with result_tab1:
                        st.markdown("#### üéØ R√©sultats GradCAM")
                        
                        # Simulation de r√©sultats GradCAM
                        col_orig, col_heat, col_overlay = st.columns(3)
                        
                        with col_orig:
                            st.image(image, caption="Original", use_column_width=True)
                        
                        with col_heat:
                            # G√©n√©ration d'une heatmap factice
                            fake_heatmap = np.random.rand(224, 224)
                            fig, ax = plt.subplots(figsize=(6, 6))
                            ax.imshow(fake_heatmap, cmap=colormap)
                            ax.axis('off')
                            ax.set_title("Heatmap GradCAM")
                            st.pyplot(fig)
                        
                        with col_overlay:
                            st.info("Superposition g√©n√©r√©e")
                            
                        # M√©triques GradCAM
                        metrics_col1, metrics_col2, metrics_col3 = st.columns(3)
                        with metrics_col1:
                            st.metric("Activation Moyenne", "0.432")
                        with metrics_col2:
                            st.metric("Concentration 75%", "23.5%")
                        with metrics_col3:
                            st.metric("Entropie", "2.34")
                    
                    with result_tab2:
                        st.markdown("#### üìä R√©sultats SHAP")
                        
                        # Simulation de graphique SHAP
                        fake_features = np.random.randn(20)
                        feature_names = [f"Feature_{i}" for i in range(20)]
                        
                        fig, ax = plt.subplots(figsize=(10, 6))
                        colors = ['red' if x > 0 else 'blue' for x in fake_features]
                        ax.barh(range(len(fake_features)), fake_features, color=colors, alpha=0.7)
                        ax.set_yticks(range(len(fake_features)))
                        ax.set_yticklabels(feature_names)
                        ax.set_xlabel("Valeur SHAP")
                        ax.set_title("Importance des Features (SHAP)")
                        ax.grid(True, alpha=0.3)
                        st.pyplot(fig)
                        
                        # Statistiques SHAP
                        st.markdown("**Statistiques:**")
                        stat_col1, stat_col2, stat_col3 = st.columns(3)
                        with stat_col1:
                            st.metric("Valeur moyenne", f"{np.mean(fake_features):.4f}")
                        with stat_col2:
                            st.metric("Valeur max", f"{np.max(fake_features):.4f}")
                        with stat_col3:
                            st.metric("√âcart-type", f"{np.std(fake_features):.4f}")
                    
                    with result_tab3:
                        st.markdown("#### ‚öñÔ∏è Comparaison des M√©thodes")
                        
                        comparison_data = {
                            'M√©thode': ['GradCAM', 'SHAP'],
                            'Confiance': [0.856, 0.782],
                            'Classe Pr√©dite': ['COVID', 'COVID'],
                            'Zone Focus': ['Poumons droits', 'R√©gion centrale'],
                            'Temps Calcul (s)': [0.23, 1.45]
                        }
                        
                        df_comparison = pd.DataFrame(comparison_data)
                        st.dataframe(df_comparison, use_container_width=True)
                        
                        st.success("‚úÖ Coh√©rence entre les m√©thodes : Les deux pointent vers une infection COVID-19")

with tab2:
    st.header("üìä Comparaison de Mod√®les")
    
    st.info("üîß Cette section permet de comparer les explications de plusieurs mod√®les sur la m√™me image")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("‚öôÔ∏è Configuration")
        
        # S√©lection des mod√®les √† comparer
        models_to_compare = st.multiselect(
            "Mod√®les √† comparer",
            ["CNN Baseline", "CNN ResNet", "CNN VGG", "Random Forest", "SVM", "XGBoost"],
            default=["CNN Baseline", "Random Forest"]
        )
        
        # Image √† analyser
        comparison_image = st.file_uploader(
            "Image pour comparaison",
            type=['png', 'jpg', 'jpeg'],
            key="comparison_image"
        )
        
        if comparison_image:
            st.image(comparison_image, caption="Image √† analyser", use_column_width=True)
    
    with col2:
        st.subheader("üìà R√©sultats Comparatifs")
        
        if comparison_image and models_to_compare:
            if st.button("üîÑ Comparer les Mod√®les", type="primary"):
                with st.spinner("Comparaison en cours..."):
                    # Simulation de comparaison
                    st.success("‚úÖ Comparaison termin√©e !")
                    
                    # Graphique de comparaison des confiances
                    fake_confidences = np.random.uniform(0.6, 0.95, len(models_to_compare))
                    
                    fig, ax = plt.subplots(figsize=(10, 6))
                    bars = ax.bar(models_to_compare, fake_confidences, alpha=0.7, 
                                 color=plt.cm.Set3(np.linspace(0, 1, len(models_to_compare))))
                    ax.set_ylabel("Confiance de Pr√©diction")
                    ax.set_title("Comparaison des Confiances par Mod√®le")
                    ax.set_ylim(0, 1)
                    
                    # Ajout des valeurs sur les barres
                    for bar, conf in zip(bars, fake_confidences):
                        ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                               f'{conf:.2%}', ha='center', va='bottom')
                    
                    plt.xticks(rotation=45)
                    plt.tight_layout()
                    st.pyplot(fig)
                    
                    # Tableau r√©capitulatif
                    comparison_results = pd.DataFrame({
                        'Mod√®le': models_to_compare,
                        'Confiance': [f"{c:.2%}" for c in fake_confidences],
                        'Classe Pr√©dite': np.random.choice(class_names, len(models_to_compare)),
                        'M√©thode Explication': ['GradCAM' if 'CNN' in m else 'SHAP' for m in models_to_compare],
                        'Coh√©rence': np.random.choice(['√âlev√©e', 'Moyenne', 'Faible'], len(models_to_compare))
                    })
                    
                    st.markdown("#### üìã R√©sum√© D√©taill√©")
                    st.dataframe(comparison_results, use_container_width=True)

with tab3:
    st.header("üìà Rapport d'Analyse Batch")
    
    st.info("üîß Analysez plusieurs images simultan√©ment pour g√©n√©rer un rapport complet")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("üìÅ Upload Batch")
        
        # Upload multiple files
        batch_files = st.file_uploader(
            "S√©lectionner plusieurs images",
            type=['png', 'jpg', 'jpeg'],
            accept_multiple_files=True,
            key="batch_images"
        )
        
        if batch_files:
            st.success(f"‚úÖ {len(batch_files)} images upload√©es")
            
            # Param√®tres du batch
            st.subheader("‚öôÔ∏è Param√®tres Batch")
            batch_method = st.selectbox("M√©thode d'analyse", ["GradCAM", "SHAP", "Les deux"])
            generate_individual = st.checkbox("Rapports individuels", True)
            generate_summary = st.checkbox("R√©sum√© global", True)
    
    with col2:
        st.subheader("üìä R√©sultats Batch")
        
        if batch_files:
            if st.button("üöÄ Lancer Analyse Batch", type="primary"):
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                results_container = st.container()
                
                # Simulation de traitement batch
                for i, file in enumerate(batch_files):
                    progress = (i + 1) / len(batch_files)
                    progress_bar.progress(progress)
                    status_text.text(f"Traitement de {file.name}...")
                    
                    # Simulation de d√©lai
                    import time
                    time.sleep(0.5)
                
                status_text.text("‚úÖ Traitement termin√© !")
                
                with results_container:
                    # G√©n√©ration du rapport r√©capitulatif
                    st.markdown("#### üìã Rapport R√©capitulatif")
                    
                    # Donn√©es simul√©es
                    report_data = []
                    for i, file in enumerate(batch_files):
                        report_data.append({
                            'Image': file.name,
                            'Classe Pr√©dite': np.random.choice(class_names),
                            'Confiance': f"{np.random.uniform(0.7, 0.98):.2%}",
                            'Activation Moyenne': f"{np.random.uniform(0.2, 0.8):.3f}",
                            'Entropie': f"{np.random.uniform(1.5, 3.0):.2f}",
                            'Statut': '‚úÖ Succ√®s'
                        })
                    
                    df_report = pd.DataFrame(report_data)
                    st.dataframe(df_report, use_container_width=True)
                    
                    # Graphiques de synth√®se
                    col_chart1, col_chart2 = st.columns(2)
                    
                    with col_chart1:
                        # Distribution des classes pr√©dites
                        class_counts = df_report['Classe Pr√©dite'].value_counts()
                        fig, ax = plt.subplots(figsize=(8, 6))
                        ax.pie(class_counts.values, labels=class_counts.index, autopct='%1.1f%%')
                        ax.set_title("Distribution des Classes Pr√©dites")
                        st.pyplot(fig)
                    
                    with col_chart2:
                        # Distribution des confiances
                        confidences = [float(c.strip('%'))/100 for c in df_report['Confiance']]
                        fig, ax = plt.subplots(figsize=(8, 6))
                        ax.hist(confidences, bins=10, alpha=0.7, edgecolor='black')
                        ax.set_xlabel("Confiance")
                        ax.set_ylabel("Nombre d'images")
                        ax.set_title("Distribution des Confiances")
                        st.pyplot(fig)
                    
                    # Bouton de t√©l√©chargement du rapport
                    csv = df_report.to_csv(index=False)
                    st.download_button(
                        label="üì• T√©l√©charger le Rapport CSV",
                        data=csv,
                        file_name=f"rapport_interpretabilite_{len(batch_files)}_images.csv",
                        mime="text/csv"
                    )

with tab4:
    st.header("üîß Utilitaires et Configuration")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üì¶ Installation des D√©pendances")
        
        dependencies = {
            "SHAP": "pip install shap",
            "TensorFlow": "pip install tensorflow",
            "OpenCV": "pip install opencv-python",
            "Scikit-learn": "pip install scikit-learn"
        }
        
        for lib, cmd in dependencies.items():
            st.code(cmd, language="bash")
        
        st.subheader("üß™ Test des Modules")
        
        if st.button("üîç Tester SHAP"):
            try:
                import shap
                st.success("‚úÖ SHAP disponible")
            except ImportError:
                st.error("‚ùå SHAP non install√©")
        
        if st.button("üîç Tester TensorFlow"):
            try:
                import tensorflow as tf
                st.success(f"‚úÖ TensorFlow {tf.__version__} disponible")
            except ImportError:
                st.error("‚ùå TensorFlow non install√©")
    
    with col2:
        st.subheader("üìö Documentation")
        
        st.markdown("""
        #### üéØ GradCAM
        - **Objectif**: Visualiser les r√©gions importantes pour un CNN
        - **Utilisation**: Images m√©dicales, classification d'objets
        - **Sortie**: Heatmap des activations importantes
        
        #### üìä SHAP
        - **Objectif**: Expliquer les pr√©dictions avec des valeurs d'importance
        - **Utilisation**: Tout type de mod√®le ML
        - **Sortie**: Valeurs d'importance par feature
        
        #### ‚öñÔ∏è Comparaison
        - **GradCAM**: Visuel, sp√©cifique aux CNN, rapide
        - **SHAP**: Quantitatif, universel, plus lent
        - **Compl√©mentaires**: Utilisez les deux pour une analyse compl√®te
        """)
        
        st.subheader("üîó Ressources")
        
        resources = [
            "[Documentation SHAP](https://shap.readthedocs.io/)",
            "[Paper GradCAM](https://arxiv.org/abs/1610.02391)",
            "[Framework RAF](./)",
            "[Exemples COVID-19](./notebooks/)"
        ]
        
        for resource in resources:
            st.markdown(f"- {resource}")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray;'>
    üîç Interface d'Interpr√©tabilit√© - Framework RAF<br>
    SHAP & GradCAM pour l'analyse des mod√®les COVID-19
    </div>
    """,
    unsafe_allow_html=True
)