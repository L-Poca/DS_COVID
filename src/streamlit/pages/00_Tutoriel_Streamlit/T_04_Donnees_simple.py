import streamlit as st
import pandas as pd
import numpy as np

st.header("üìä T_04 - Gestion des Donn√©es (Version Simple)")

st.markdown("**üìã Objectif :** Apprendre √† afficher et manipuler des donn√©es - tableaux, CSV, filtres simples.")

st.markdown("---")

# ================================
# 1. AFFICHER UN TABLEAU SIMPLE
# ================================
st.subheader("1Ô∏è‚É£ Afficher un tableau")

st.markdown("""
**üìñ Explication simple :**
Un tableau permet d'organiser et afficher des donn√©es de fa√ßon claire.
""")

col1, col2 = st.columns(2)

with col1:
    st.markdown("#### üíª Code")
    st.code("""
import pandas as pd

# Cr√©er des donn√©es simples
data = {
    'Nom': ['Alice', 'Bob', 'Charlie'],
    '√Çge': [25, 30, 35],
    'Ville': ['Paris', 'Lyon', 'Marseille']
}

# Cr√©er un DataFrame
df = pd.DataFrame(data)

# Afficher le tableau
st.dataframe(df)
""")

with col2:
    st.markdown("#### üéØ R√©sultat")
    
    # Cr√©er des donn√©es simples
    data = {
        'Nom': ['Alice', 'Bob', 'Charlie'],
        '√Çge': [25, 30, 35],
        'Ville': ['Paris', 'Lyon', 'Marseille']
    }
    
    df = pd.DataFrame(data)
    st.dataframe(df, use_container_width=True)

st.divider()

# ================================
# 2. TABLEAU AVEC PLUS DE DONN√âES
# ================================
st.subheader("2Ô∏è‚É£ Tableau avec plus de donn√©es")

st.markdown("""
**üìñ Explication simple :**
Quand on a beaucoup de donn√©es, Streamlit permet de naviguer facilement.
""")

col1, col2 = st.columns(2)

with col1:
    st.markdown("#### üíª Code")
    st.code("""
# Cr√©er plus de donn√©es
noms = ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 
        'Frank', 'Grace', 'Henry', 'Iris', 'Jack']
ages = [25, 30, 35, 28, 32, 45, 29, 38, 26, 41]
villes = ['Paris', 'Lyon', 'Marseille', 'Toulouse', 
          'Nice', 'Nantes', 'Strasbourg', 'Montpellier', 
          'Bordeaux', 'Lille']
salaires = [35000, 42000, 38000, 36000, 44000, 
            55000, 39000, 48000, 37000, 52000]

# Cr√©er le DataFrame
df = pd.DataFrame({
    'Nom': noms,
    '√Çge': ages,
    'Ville': villes,
    'Salaire': salaires
})

# Afficher
st.dataframe(df, height=300)
""")

with col2:
    st.markdown("#### üéØ R√©sultat")
    
    # Cr√©er plus de donn√©es
    noms = ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 
            'Frank', 'Grace', 'Henry', 'Iris', 'Jack']
    ages = [25, 30, 35, 28, 32, 45, 29, 38, 26, 41]
    villes = ['Paris', 'Lyon', 'Marseille', 'Toulouse', 
              'Nice', 'Nantes', 'Strasbourg', 'Montpellier', 
              'Bordeaux', 'Lille']
    salaires = [35000, 42000, 38000, 36000, 44000, 
                55000, 39000, 48000, 37000, 52000]
    
    df_large = pd.DataFrame({
        'Nom': noms,
        '√Çge': ages,
        'Ville': villes,
        'Salaire': salaires
    })
    
    st.dataframe(df_large, height=300, use_container_width=True)

st.divider()

# ================================
# 3. M√âTRIQUES SIMPLES
# ================================
st.subheader("3Ô∏è‚É£ Afficher des m√©triques")

st.markdown("""
**üìñ Explication simple :**
Les m√©triques permettent de montrer les chiffres importants en grand.
""")

col1, col2 = st.columns(2)

with col1:
    st.markdown("#### üíª Code")
    st.code("""
# Calculer des statistiques
nombre_employes = len(df)
age_moyen = df['√Çge'].mean()
salaire_max = df['Salaire'].max()

# Afficher les m√©triques
st.metric("Nombre d'employ√©s", nombre_employes)
st.metric("√Çge moyen", f"{age_moyen:.1f} ans")
st.metric("Salaire maximum", f"{salaire_max:,} ‚Ç¨")
""")

with col2:
    st.markdown("#### üéØ R√©sultat")
    
    # Calculer des statistiques
    nombre_employes = len(df_large)
    age_moyen = df_large['√Çge'].mean()
    salaire_max = df_large['Salaire'].max()
    
    # Afficher les m√©triques
    st.metric("Nombre d'employ√©s", nombre_employes)
    st.metric("√Çge moyen", f"{age_moyen:.1f} ans")
    st.metric("Salaire maximum", f"{salaire_max:,} ‚Ç¨")

st.divider()

# ================================
# 4. FILTRER LES DONN√âES
# ================================
st.subheader("4Ô∏è‚É£ Filtrer les donn√©es")

st.markdown("""
**üìñ Explication simple :**
Les filtres permettent de ne montrer que certaines donn√©es.
""")

col1, col2 = st.columns(2)

with col1:
    st.markdown("#### üíª Code")
    st.code("""
# Widget pour filtrer par √¢ge
age_min = st.slider("√Çge minimum:", 20, 50, 25)

# Filtrer les donn√©es
df_filtre = df[df['√Çge'] >= age_min]

# Afficher le r√©sultat
st.write(f"Personnes de {age_min} ans ou plus:")
st.dataframe(df_filtre)
""")

with col2:
    st.markdown("#### üéØ R√©sultat")
    
    # Widget pour filtrer par √¢ge
    age_min = st.slider("√Çge minimum:", 20, 50, 25, key="demo_age_filter")
    
    # Filtrer les donn√©es
    df_filtre = df_large[df_large['√Çge'] >= age_min]
    
    # Afficher le r√©sultat
    st.write(f"Personnes de {age_min} ans ou plus:")
    st.dataframe(df_filtre, use_container_width=True)

st.divider()

# ================================
# 5. FILTRER PAR CAT√âGORIE
# ================================
st.subheader("5Ô∏è‚É£ Filtrer par cat√©gorie")

st.markdown("""
**üìñ Explication simple :**
On peut aussi filtrer par ville, nom, ou toute autre cat√©gorie.
""")

col1, col2 = st.columns(2)

with col1:
    st.markdown("#### üíª Code")
    st.code("""
# Widget pour choisir les villes
villes_selectionnees = st.multiselect(
    "Choisissez les villes:",
    df['Ville'].unique(),
    default=df['Ville'].unique()[:3]
)

# Filtrer par villes
if villes_selectionnees:
    df_villes = df[df['Ville'].isin(villes_selectionnees)]
    st.dataframe(df_villes)
else:
    st.write("S√©lectionnez au moins une ville")
""")

with col2:
    st.markdown("#### üéØ R√©sultat")
    
    # Widget pour choisir les villes
    villes_selectionnees = st.multiselect(
        "Choisissez les villes:",
        df_large['Ville'].unique(),
        default=list(df_large['Ville'].unique()[:3]),
        key="demo_ville_filter"
    )
    
    # Filtrer par villes
    if villes_selectionnees:
        df_villes = df_large[df_large['Ville'].isin(villes_selectionnees)]
        st.dataframe(df_villes, use_container_width=True)
    else:
        st.write("S√©lectionnez au moins une ville")

st.divider()

# ================================
# 6. RECHERCHE DANS LES DONN√âES
# ================================
st.subheader("6Ô∏è‚É£ Recherche simple")

st.markdown("""
**üìñ Explication simple :**
Permettre √† l'utilisateur de rechercher dans les donn√©es.
""")

col1, col2 = st.columns(2)

with col1:
    st.markdown("#### üíª Code")
    st.code("""
# Zone de recherche
recherche = st.text_input("Rechercher un nom:")

# Filtrer par nom
if recherche:
    df_recherche = df[df['Nom'].str.contains(
        recherche, case=False, na=False
    )]
    
    if not df_recherche.empty:
        st.dataframe(df_recherche)
    else:
        st.write("Aucun r√©sultat trouv√©")
else:
    st.write("Tapez un nom pour rechercher")
""")

with col2:
    st.markdown("#### üéØ R√©sultat")
    
    # Zone de recherche
    recherche = st.text_input("Rechercher un nom:", key="demo_search")
    
    # Filtrer par nom
    if recherche:
        df_recherche = df_large[df_large['Nom'].str.contains(
            recherche, case=False, na=False
        )]
        
        if not df_recherche.empty:
            st.dataframe(df_recherche, use_container_width=True)
        else:
            st.write("Aucun r√©sultat trouv√©")
    else:
        st.write("Tapez un nom pour rechercher")

st.divider()

# ================================
# 7. CR√âER DES DONN√âES √Ä LA VOL√âE
# ================================
st.subheader("7Ô∏è‚É£ Cr√©er des donn√©es al√©atoirement")

st.markdown("""
**üìñ Explication simple :**
Parfois utile pour tester avec des donn√©es g√©n√©r√©es automatiquement.
""")

col1, col2 = st.columns(2)

with col1:
    st.markdown("#### üíª Code")
    st.code("""
import numpy as np

# Widget pour choisir le nombre de lignes
nb_lignes = st.number_input(
    "Nombre de lignes:", 
    min_value=1, max_value=100, value=10
)

# G√©n√©rer des donn√©es al√©atoirement
np.random.seed(42)  # Pour reproduire les m√™mes donn√©es

df_aleatoire = pd.DataFrame({
    'ID': range(1, nb_lignes + 1),
    'Valeur A': np.random.randint(1, 100, nb_lignes),
    'Valeur B': np.random.randint(50, 200, nb_lignes),
    'Cat√©gorie': np.random.choice(['X', 'Y', 'Z'], nb_lignes)
})

st.dataframe(df_aleatoire)
""")

with col2:
    st.markdown("#### üéØ R√©sultat")
    
    # Widget pour choisir le nombre de lignes
    nb_lignes = st.number_input(
        "Nombre de lignes:", 
        min_value=1, max_value=100, value=10,
        key="demo_nb_lignes"
    )
    
    # G√©n√©rer des donn√©es al√©atoirement
    np.random.seed(42)  # Pour reproduire les m√™mes donn√©es
    
    df_aleatoire = pd.DataFrame({
        'ID': range(1, nb_lignes + 1),
        'Valeur A': np.random.randint(1, 100, nb_lignes),
        'Valeur B': np.random.randint(50, 200, nb_lignes),
        'Cat√©gorie': np.random.choice(['X', 'Y', 'Z'], nb_lignes)
    })
    
    st.dataframe(df_aleatoire, use_container_width=True)

st.divider()

# ================================
# 8. EXERCICE PRATIQUE
# ================================
st.subheader("8Ô∏è‚É£ Exercice pratique")

st.markdown("""
**üéØ √Ä vous de jouer !**
Cr√©ez votre propre tableau de donn√©es avec filtres.
""")

with st.expander("üìù Exercice : Mon tableau avec filtres"):
    st.markdown("""
    **Mission :**
    
    1. Cr√©ez un tableau avec 5 colonnes de votre choix
    2. Ajoutez un filtre par nombre
    3. Ajoutez un filtre par cat√©gorie
    4. Affichez des m√©triques sur vos donn√©es
    
    **Exemple - Notes d'√©tudiants :**
    """)
    
    st.code("""
# Donn√©es d'√©tudiants
etudiants = {
    'Nom': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],
    'Classe': ['A', 'B', 'A', 'C', 'B'],
    'Math': [15, 12, 18, 14, 16],
    'Fran√ßais': [16, 14, 15, 17, 13],
    'Sciences': [17, 13, 19, 15, 14]
}

df_notes = pd.DataFrame(etudiants)

# Filtre par note minimum
note_min = st.slider("Note minimum en Math:", 0, 20, 10)
df_filtre = df_notes[df_notes['Math'] >= note_min]

# Filtre par classe
classes = st.multiselect("Classes:", ['A', 'B', 'C'], default=['A', 'B'])
if classes:
    df_filtre = df_filtre[df_filtre['Classe'].isin(classes)]

# Affichage
st.dataframe(df_filtre)

# M√©triques
st.metric("Moyenne Math", f"{df_filtre['Math'].mean():.1f}")
""")

# Zone de test
st.markdown("**üíª Exemple fonctionnel :**")

# Donn√©es d'√©tudiants
etudiants = {
    'Nom': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 'Frank', 'Grace'],
    'Classe': ['A', 'B', 'A', 'C', 'B', 'A', 'C'],
    'Math': [15, 12, 18, 14, 16, 17, 13],
    'Fran√ßais': [16, 14, 15, 17, 13, 18, 15],
    'Sciences': [17, 13, 19, 15, 14, 16, 16]
}

df_notes = pd.DataFrame(etudiants)

# Filtres
note_min = st.slider("Note minimum en Math:", 0, 20, 10, key="demo_note_min")
classes = st.multiselect("Classes:", ['A', 'B', 'C'], default=['A', 'B'], key="demo_classes")

# Application des filtres
df_filtre_notes = df_notes[df_notes['Math'] >= note_min]
if classes:
    df_filtre_notes = df_filtre_notes[df_filtre_notes['Classe'].isin(classes)]

# Affichage
st.dataframe(df_filtre_notes, use_container_width=True)

# M√©triques
if not df_filtre_notes.empty:
    col_m1, col_m2, col_m3 = st.columns(3)
    with col_m1:
        st.metric("Moyenne Math", f"{df_filtre_notes['Math'].mean():.1f}")
    with col_m2:
        st.metric("Moyenne Fran√ßais", f"{df_filtre_notes['Fran√ßais'].mean():.1f}")
    with col_m3:
        st.metric("Nombre d'√©tudiants", len(df_filtre_notes))

st.divider()

# ================================
# 9. R√âCAPITULATIF
# ================================
st.subheader("9Ô∏è‚É£ R√©capitulatif")

st.markdown("""
**üéì Ce que vous avez appris :**

‚úÖ **Tableaux :** `st.dataframe()` pour afficher des donn√©es  
‚úÖ **M√©triques :** `st.metric()` pour les chiffres importants  
‚úÖ **Filtres num√©riques :** Utiliser `df[df['colonne'] >= valeur]`  
‚úÖ **Filtres cat√©gories :** Utiliser `df['colonne'].isin(liste)`  
‚úÖ **Recherche :** Utiliser `df['colonne'].str.contains()`  
‚úÖ **Statistiques :** `.mean()`, `.max()`, `.min()`, `len()`  
‚úÖ **Donn√©es al√©atoaires :** `np.random` pour tester  

**üí° Conseils :**
- Toujours v√©rifier si le DataFrame filtr√© n'est pas vide
- Utiliser `use_container_width=True` pour l'affichage
- Combiner plusieurs filtres pour plus de flexibilit√©

**üöÄ Prochaine √©tape :** T_05 - Layout (organiser l'interface)
""")

# Navigation
st.markdown("---")
col1, col2, col3 = st.columns(3)

with col1:
    if st.button("‚¨ÖÔ∏è Module pr√©c√©dent (T_03)", key="nav_prev_t4"):
        st.info("üëà Utilisez la barre lat√©rale pour naviguer vers T_03 - Graphiques")

with col2:
    if st.button("üìö Retour au sommaire", key="nav_home_t4"):
        st.info("üëà Utilisez la barre lat√©rale pour naviguer vers T_00 - Sommaire")

with col3:
    if st.button("‚û°Ô∏è Module suivant (T_05)", key="nav_next_t4"):
        st.info("üëà Utilisez la barre lat√©rale pour naviguer vers T_05 - Layout")
